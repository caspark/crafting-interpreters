print "one";
print true;
var x = 3 + 4 == 7 ? 8 : 10;
var y;
var w = "hi there";
print 2 + 1 + x;
x = 42; y = "friend";
print x;

var a = "global a";
var b = "global b";
var c = "global c";
{
  var a = "outer a";
  var b = "outer b";
  {
    var a = "inner a";
    print a;
    print b;
    print c;
  }
  print a;
  print b;
  print c;
}
print a;
print b;
print c;

/*
var v = 1;
{
    var v = v + 2;
    print v;
}
*/

var a = 0;
var temp;


for (var b = 1; a < 10000; b = temp + b) {
  print a;
  temp = a;
  a = b;
  if (a == 144) {
    break;
  }
}

fun sayHi(first, last) {
  print "Hi, " + first + " " + last + "!";
}

sayHi("Dear", "Reader");

print "Fib";

fun fib(n) {
  if (n <= 1) return n;
  return fib(n - 2) + fib(n - 1);
}

for (var i = 0; i < 20; i = i + 1) {
  print fib(i);
}

print "Counter example";

fun makeCounter() {
  var i = 0;
  fun count() {
    i = i + 1;
    print i;
  }

  return count;
}

var counter = makeCounter();
counter(); // "1".
counter(); // "2".

fun scope(a) {
  print(a);
  a = "x";
  print(a);
  //var a = "local";
  //print(a);
}

var b = "hi";
scope(b);
print b;

var f = fun(a) {
  print "f" + a;
};
f("inline");
(fun() {print "IEFE!"; })();

var a = "global";
{
  fun showA() {
    print a;
    return 42;
  }

  showA();
  var a = "block";
  print showA();
  print a;
}

//return "at top level";

// unused variable checking (chapter 11 challenge)
var u = "outer";
var outer_unused = "haha"; // should not be detected
{
  /*
  fun notUser() {
    print u;
  }
  var u;
  notUser();

  var init_inline_but_unused = "inline";
  var init_later_but_unused;
  init_later_but_unused = "later";

  // check uninitialized variables (personal challenge)
  var uninit_not_used;
  var uninit_but_used;
  print uninit_but_used;
  */

  /*
  // init only in a branch that's never executed should pass compile time checks
  var init_in_branch;
  if (false) {
    init_in_branch = "set in branch";
  }
  print init_in_branch
  */
}

class DevonshireCream {
  serveOn() {
    return "Scones";
  }
}

print DevonshireCream; // Prints "DevonshireCream".

class Bagel {}
var bagel = Bagel();
print bagel; // Prints "Bagel instance".
bagel.toasted = true;
print "Bagel is toasted? " + bagel.toasted;

class Bacon {
  eat() {
    print "Crunch crunch crunch!";
  }
}

Bacon().eat(); // Prints "Crunch crunch crunch!".

class Cake {
  taste() {
    var adjective = "delicious";
    print "The " + this.flavor + " cake is " + adjective + "!";
  }
}

var cake = Cake();
cake.flavor = "German chocolate";
cake.taste(); // Prints "The German chocolate cake is delicious!".
// print this;

class Foo {
  init() {
    //return "something else";
    return;
  }
}
print Foo();
